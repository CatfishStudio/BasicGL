'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet3
    Inherits DataSet
    
    Private tableМодули As МодулиDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Модули")) Is Nothing) Then
                Me.Tables.Add(New МодулиDataTable(ds.Tables("Модули")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Модули As МодулиDataTable
        Get
            Return Me.tableМодули
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet3 = CType(MyBase.Clone,DataSet3)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Модули")) Is Nothing) Then
            Me.Tables.Add(New МодулиDataTable(ds.Tables("Модули")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableМодули = CType(Me.Tables("Модули"),МодулиDataTable)
        If (Not (Me.tableМодули) Is Nothing) Then
            Me.tableМодули.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet3"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet3.xsd"
        Me.Locale = New System.Globalization.CultureInfo("ru-RU")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableМодули = New МодулиDataTable
        Me.Tables.Add(Me.tableМодули)
    End Sub
    
    Private Function ShouldSerializeМодули() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub МодулиRowChangeEventHandler(ByVal sender As Object, ByVal e As МодулиRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class МодулиDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnГруппа As DataColumn
        
        Private columnИдентификатор As DataColumn
        
        Private columnМодуль As DataColumn
        
        Private columnОписание As DataColumn
        
        Private columnСвязьСВнешнимиМодулями As DataColumn
        
        Private columnСтрока As DataColumn
        
        Private columnТип As DataColumn
        
        Friend Sub New()
            MyBase.New("Модули")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ГруппаColumn As DataColumn
            Get
                Return Me.columnГруппа
            End Get
        End Property
        
        Friend ReadOnly Property ИдентификаторColumn As DataColumn
            Get
                Return Me.columnИдентификатор
            End Get
        End Property
        
        Friend ReadOnly Property МодульColumn As DataColumn
            Get
                Return Me.columnМодуль
            End Get
        End Property
        
        Friend ReadOnly Property ОписаниеColumn As DataColumn
            Get
                Return Me.columnОписание
            End Get
        End Property
        
        Friend ReadOnly Property СвязьСВнешнимиМодулямиColumn As DataColumn
            Get
                Return Me.columnСвязьСВнешнимиМодулями
            End Get
        End Property
        
        Friend ReadOnly Property СтрокаColumn As DataColumn
            Get
                Return Me.columnСтрока
            End Get
        End Property
        
        Friend ReadOnly Property ТипColumn As DataColumn
            Get
                Return Me.columnТип
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As МодулиRow
            Get
                Return CType(Me.Rows(index),МодулиRow)
            End Get
        End Property
        
        Public Event МодулиRowChanged As МодулиRowChangeEventHandler
        
        Public Event МодулиRowChanging As МодулиRowChangeEventHandler
        
        Public Event МодулиRowDeleted As МодулиRowChangeEventHandler
        
        Public Event МодулиRowDeleting As МодулиRowChangeEventHandler
        
        Public Overloads Sub AddМодулиRow(ByVal row As МодулиRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddМодулиRow(ByVal Группа As String, ByVal Идентификатор As String, ByVal Модуль As String, ByVal Описание As String, ByVal СвязьСВнешнимиМодулями As String, ByVal Тип As String) As МодулиRow
            Dim rowМодулиRow As МодулиRow = CType(Me.NewRow,МодулиRow)
            rowМодулиRow.ItemArray = New Object() {Группа, Идентификатор, Модуль, Описание, СвязьСВнешнимиМодулями, Nothing, Тип}
            Me.Rows.Add(rowМодулиRow)
            Return rowМодулиRow
        End Function
        
        Public Function FindByСтрока(ByVal Строка As Integer) As МодулиRow
            Return CType(Me.Rows.Find(New Object() {Строка}),МодулиRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As МодулиDataTable = CType(MyBase.Clone,МодулиDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New МодулиDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnГруппа = Me.Columns("Группа")
            Me.columnИдентификатор = Me.Columns("Идентификатор")
            Me.columnМодуль = Me.Columns("Модуль")
            Me.columnОписание = Me.Columns("Описание")
            Me.columnСвязьСВнешнимиМодулями = Me.Columns("СвязьСВнешнимиМодулями")
            Me.columnСтрока = Me.Columns("Строка")
            Me.columnТип = Me.Columns("Тип")
        End Sub
        
        Private Sub InitClass()
            Me.columnГруппа = New DataColumn("Группа", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnГруппа)
            Me.columnИдентификатор = New DataColumn("Идентификатор", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnИдентификатор)
            Me.columnМодуль = New DataColumn("Модуль", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnМодуль)
            Me.columnОписание = New DataColumn("Описание", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnОписание)
            Me.columnСвязьСВнешнимиМодулями = New DataColumn("СвязьСВнешнимиМодулями", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnСвязьСВнешнимиМодулями)
            Me.columnСтрока = New DataColumn("Строка", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnСтрока)
            Me.columnТип = New DataColumn("Тип", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnТип)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnСтрока}, true))
            Me.columnСтрока.AutoIncrement = true
            Me.columnСтрока.AllowDBNull = false
            Me.columnСтрока.Unique = true
        End Sub
        
        Public Function NewМодулиRow() As МодулиRow
            Return CType(Me.NewRow,МодулиRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New МодулиRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(МодулиRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.МодулиRowChangedEvent) Is Nothing) Then
                RaiseEvent МодулиRowChanged(Me, New МодулиRowChangeEvent(CType(e.Row,МодулиRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.МодулиRowChangingEvent) Is Nothing) Then
                RaiseEvent МодулиRowChanging(Me, New МодулиRowChangeEvent(CType(e.Row,МодулиRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.МодулиRowDeletedEvent) Is Nothing) Then
                RaiseEvent МодулиRowDeleted(Me, New МодулиRowChangeEvent(CType(e.Row,МодулиRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.МодулиRowDeletingEvent) Is Nothing) Then
                RaiseEvent МодулиRowDeleting(Me, New МодулиRowChangeEvent(CType(e.Row,МодулиRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveМодулиRow(ByVal row As МодулиRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class МодулиRow
        Inherits DataRow
        
        Private tableМодули As МодулиDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableМодули = CType(Me.Table,МодулиDataTable)
        End Sub
        
        Public Property Группа As String
            Get
                Try 
                    Return CType(Me(Me.tableМодули.ГруппаColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableМодули.ГруппаColumn) = value
            End Set
        End Property
        
        Public Property Идентификатор As String
            Get
                Try 
                    Return CType(Me(Me.tableМодули.ИдентификаторColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableМодули.ИдентификаторColumn) = value
            End Set
        End Property
        
        Public Property Модуль As String
            Get
                Try 
                    Return CType(Me(Me.tableМодули.МодульColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableМодули.МодульColumn) = value
            End Set
        End Property
        
        Public Property Описание As String
            Get
                Try 
                    Return CType(Me(Me.tableМодули.ОписаниеColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableМодули.ОписаниеColumn) = value
            End Set
        End Property
        
        Public Property СвязьСВнешнимиМодулями As String
            Get
                Try 
                    Return CType(Me(Me.tableМодули.СвязьСВнешнимиМодулямиColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableМодули.СвязьСВнешнимиМодулямиColumn) = value
            End Set
        End Property
        
        Public Property Строка As Integer
            Get
                Return CType(Me(Me.tableМодули.СтрокаColumn),Integer)
            End Get
            Set
                Me(Me.tableМодули.СтрокаColumn) = value
            End Set
        End Property
        
        Public Property Тип As String
            Get
                Try 
                    Return CType(Me(Me.tableМодули.ТипColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableМодули.ТипColumn) = value
            End Set
        End Property
        
        Public Function IsГруппаNull() As Boolean
            Return Me.IsNull(Me.tableМодули.ГруппаColumn)
        End Function
        
        Public Sub SetГруппаNull()
            Me(Me.tableМодули.ГруппаColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsИдентификаторNull() As Boolean
            Return Me.IsNull(Me.tableМодули.ИдентификаторColumn)
        End Function
        
        Public Sub SetИдентификаторNull()
            Me(Me.tableМодули.ИдентификаторColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsМодульNull() As Boolean
            Return Me.IsNull(Me.tableМодули.МодульColumn)
        End Function
        
        Public Sub SetМодульNull()
            Me(Me.tableМодули.МодульColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsОписаниеNull() As Boolean
            Return Me.IsNull(Me.tableМодули.ОписаниеColumn)
        End Function
        
        Public Sub SetОписаниеNull()
            Me(Me.tableМодули.ОписаниеColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsСвязьСВнешнимиМодулямиNull() As Boolean
            Return Me.IsNull(Me.tableМодули.СвязьСВнешнимиМодулямиColumn)
        End Function
        
        Public Sub SetСвязьСВнешнимиМодулямиNull()
            Me(Me.tableМодули.СвязьСВнешнимиМодулямиColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsТипNull() As Boolean
            Return Me.IsNull(Me.tableМодули.ТипColumn)
        End Function
        
        Public Sub SetТипNull()
            Me(Me.tableМодули.ТипColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class МодулиRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As МодулиRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As МодулиRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As МодулиRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
